import { promises as fs } from 'fs';
import { join } from 'path';
import globToRegExp from 'glob-to-regexp';
import { getPackageVersion } from './package_json.js';
import { nonNullable } from './utils/non_nullable.js';
const generateManifest = ({ bundles = [], declarations = [], functions }) => {
    const routes = declarations.map((declaration) => {
        const func = functions.find(({ name }) => declaration.function === name);
        if (func === undefined) {
            return;
        }
        const pattern = 'pattern' in declaration ? new RegExp(declaration.pattern) : globToRegExp(declaration.path);
        const serializablePattern = pattern.source.replace(/\\\//g, '/');
        return {
            function: func.name,
            pattern: serializablePattern,
        };
    });
    const manifestBundles = bundles.map(({ extension, format, hash }) => ({
        asset: hash + extension,
        format,
    }));
    const manifest = {
        bundles: manifestBundles,
        routes: routes.filter(nonNullable),
        bundler_version: getPackageVersion(),
    };
    return manifest;
};
const writeManifest = ({ bundles, declarations = [], distDirectory, functions }) => {
    const manifest = generateManifest({ bundles, declarations, functions });
    const manifestPath = join(distDirectory, 'manifest.json');
    return fs.writeFile(manifestPath, JSON.stringify(manifest));
};
export { generateManifest, writeManifest };
